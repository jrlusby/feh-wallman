#! /bin/python2.7

import argparse
import subprocess
import os, random
from os.path import expanduser
import sys

home = expanduser("~")
history_file = home+'/.wallman_history'
history_length = 10

def main(argv):
    parser = argparse.ArgumentParser(
            description='Personalized Wallpaper managing')
    parser.add_argument('-r', '--random-wallpaper', action='store_true', 
            help='pick a random wallpaper and display it')
    parser.add_argument('-u', '--undo', action='store_true', 
            help='go back one wallpaper in the history')
    parser.add_argument('-s', '--sources', nargs='+', 
            help='allows user to specify non standard wallpaper directory, \
                  or multiple wallpaper directories')
    parser.add_argument('-b', '--balance-prob', action='store_true',
            help='make chance of picking from any given directory equal')
    parser.add_argument('--recurse', action='store_true', 
            help='recursively search subdirectories')
    parser.add_argument('-f', '--filter', 
            help='filters images based on aspect ratio')
    parser.add_argument('-d', '--delete', action='store_true', 
            help='delete current wallpaper')
    args = parser.parse_args()

    if not args.sources:
        sources = [home+'/.wallpaper']
    else:
        sources = args.sources
    

    if args.random_wallpaper:
        r_wallpaper = randFile(sources, args.filter, args.balance_prob, args.recurse)
        subprocess.call(['feh', '--bg-max', r_wallpaper.strip()])
        writeToHistory(r_wallpaper+'\n')
    if args.undo:
        history = listFromHistory()
        subprocess.call(['feh', '--bg-max', history[1].strip()])
        del history[0]
        hist_fd = open(history_file, 'w')
        hist_fd.writelines(history)
        hist_fd.close()
    if args.delete:
        deleteCurrentWallpaper()

def randFile(directories, filter, balance_prob=False, recurse=False):
    choices = []
    import glob
    if recurse:
        for dir in directories:
            directories = directories + [x[0] for x in os.walk(dir)]
        directories = list(set(directories))
    directories[:] = [x for x in directories if glob.glob(x+"/*.*") != []]
    if balance_prob:
        choices = glob.glob(random.choice(directories)+"/*.*")
    else:
        for directory in directories:
            choices = choices + glob.glob(directory+"/*.*")
    filtered_choices = []
    if filter:
        width, height = filter.split('x')
        from PIL import Image
        for file in choices:
            im = Image.open(file)
            imwidth, imheight = im.size
            if (float(imwidth) / float(imheight)) >= (float(width) / float(height)):
                filtered_choices.append(file)
    else:
        filtered_choices = choices
    return random.choice(filtered_choices)

def listFromHistory(indexes=range(0,history_length)):
    hist_pics = []
    with open(history_file) as hist_fd:
        lines = hist_fd.readlines()
        for index in indexes:
            if index < len(lines):
                hist_pics.append(lines[index])
    return hist_pics


def writeToHistory(wallpaper):
    hist_fd = open(history_file)
    output = [wallpaper]
    for line in hist_fd:
        if len(output) < history_length:
            output.append(line)
    hist_fd.close
    hist_fd = open(history_file, 'w')
    hist_fd.writelines(output)
    hist_fd.close()

def deleteCurrentWallpaper():
    print(listFromHistory())
    if raw_input('ARE YOU SURE? [Yes/No]') == 'Yes':
        hist_fd = open(history_file)
        shitty_wallpaper = hist_fd.readline()
        #remove the wallpaper
        print("rremove -f {}".format(shitty_wallpaper))
        os.remove(shitty_wallpaper.strip())
        output = []
        for line in hist_fd:
            output.append(line)
        subprocess.call(['feh', '--bg-max', output[0].strip()])
        hist_fd.close()
        hist_fd = open(history_file, 'w')
        hist_fd.writelines(output)
        hist_fd.close()
    else:
        print('You didnt type Yes so I no delete-y')

if __name__ == '__main__':
    sys.exit(main(sys.argv))
